<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>TIL on /dev/random: A Bit of Everything</title><link>https://johnhollowell.com/blog/series/til/</link><description>Recent content in TIL on /dev/random: A Bit of Everything</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@johnhollowell.com (John Hollowell)</managingEditor><webMaster>contact@johnhollowell.com (John Hollowell)</webMaster><copyright>Â©2022 John Hollowell, All Rights Reserved</copyright><lastBuildDate>Sat, 24 Jul 2021 00:39:18 +0000</lastBuildDate><atom:link href="https://johnhollowell.com/blog/series/til/index.xml" rel="self" type="application/rss+xml"/><item><title>TIL: Kernel Same-page Merging (KSM)</title><link>https://johnhollowell.com/blog/posts/til-ksm/</link><pubDate>Sat, 24 Jul 2021 00:39:18 +0000</pubDate><author>contact@johnhollowell.com (John Hollowell)</author><atom:modified>Sat, 24 Jul 2021 00:39:18 +0000</atom:modified><guid>https://johnhollowell.com/blog/posts/til-ksm/</guid><description>I first noticed Kernel Same-page Merging (KSM) while working with Virtual Machines (VMs) under KVM (in Proxmox VE).
KSM is a way of reducing physical memory usage by using one physical page of memory for all duplicate copied of that page. It does this by periodically scanning through memory, finding duplicate pages, and de-duplicating them via virtual memory. It is an extension of how the kernel shares pages between fork()&amp;lsquo;ed processes and uses many of the same methods of sharing memory.</description><dc:creator>John Hollowell</dc:creator><category>Linux</category><category>memory</category><category>TIL</category></item><item><title>TIL: AD Forests</title><link>https://johnhollowell.com/blog/posts/til-ad-forests/</link><pubDate>Tue, 08 Jun 2021 06:10:52 +0000</pubDate><author>contact@johnhollowell.com (John Hollowell)</author><atom:modified>Tue, 08 Jun 2021 06:10:52 +0000</atom:modified><guid>https://johnhollowell.com/blog/posts/til-ad-forests/</guid><description>For environments with complex Active Directory (AD) environments, AD forests can allow flexibility in management and organization of objects.
Basically, an AD forest allows multiple domains and trees of domains (subdomains) to access and have a shared configuration while still having separate domains with separate host servers.
They allow domains to trust and access each other while still maintain separations and boarders. I&amp;rsquo;ve seen this used to allow corporate and client domains to communicate or to have a development domain tree that trust and can cross-talk with the production domain tree while still being separate (this is less common as dev domains are usually just subdomains within the production tree).</description><dc:creator>John Hollowell</dc:creator><media:content url="https://johnhollowell.com/blog/post-cover-image/ad_forest.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>Active Directory</category><category>TIL</category></item></channel></rss>