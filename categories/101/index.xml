<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>101 on /dev/random: A Bit of Everything</title><link>https://johnhollowell.com/blog/categories/101/</link><description>Recent content in 101 on /dev/random: A Bit of Everything</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>contact@johnhollowell.com (John Hollowell)</managingEditor><webMaster>contact@johnhollowell.com (John Hollowell)</webMaster><copyright>Â©{year} John Hollowell, All Rights Reserved</copyright><lastBuildDate>Fri, 25 Jun 2021 20:06:55 +0000</lastBuildDate><atom:link href="https://johnhollowell.com/blog/categories/101/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started With Devcontainers</title><link>https://johnhollowell.com/blog/posts/getting-started-with-devcontainers/</link><pubDate>Fri, 25 Jun 2021 20:06:55 +0000</pubDate><author>contact@johnhollowell.com (John Hollowell)</author><atom:modified>Fri, 25 Jun 2021 20:06:55 +0000</atom:modified><guid>https://johnhollowell.com/blog/posts/getting-started-with-devcontainers/</guid><description>Setting up and maintaining a development environment is hard, especially when you need to destructively test features or libraries. Especially for contributing to a new project, you don&amp;rsquo;t know everything that is needed. Sometimes the install/development instructions assume some base tools or packages that are not included in your development environment of choice.
In come devcontainers. Rather than having to search through the README for a project you are wanting to contribute to, installing several packages onto your machine, and troubleshooting when it doesn&amp;rsquo;t work, you can simply open the repository as a devcontainer and you are ready to start contributing.</description><dc:creator>John Hollowell</dc:creator><media:content url="https://johnhollowell.com/blog/post-cover-image/vscode_remote-containers.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>development</category><category>containers</category><category>101</category><category>guide</category></item><item><title>Clemson SoC 101</title><link>https://johnhollowell.com/blog/posts/clemson-soc-101/</link><pubDate>Mon, 08 Feb 2021 20:08:42 -0500</pubDate><author>contact@johnhollowell.com (John Hollowell)</author><atom:modified>Mon, 08 Feb 2021 20:08:42 -0500</atom:modified><guid>https://johnhollowell.com/blog/posts/clemson-soc-101/</guid><description>Clemson&amp;rsquo;s School of Computing (SoC) is the place at Clemson where Computer Science (CPSC), Computer Information Systems (CIS), and Digital Production Arts (DPA) are located. Other computing departments (like Computer Engineering) also use some of the SoC&amp;rsquo;s systems. Below are some useful tips and tools for quickly getting going in the SoC.
Access Servers The access servers are the way you can access all the SoC computers from off-campus (without having to use the VPN).</description><dc:creator>John Hollowell</dc:creator><category>101</category><category>Getting started in CS at Clemson</category></item></channel></rss>